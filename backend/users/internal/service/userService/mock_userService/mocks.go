// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/userService/service.go

// Package userServiceMocks is a generated GoMock package.
package userServiceMocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/Cwby333/user-microservice/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(ctx context.Context, user models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), ctx, user)
}

// DeleteUserByID mocks base method.
func (m *MockUserRepo) DeleteUserByID(ctx context.Context, ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockUserRepoMockRecorder) DeleteUserByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockUserRepo)(nil).DeleteUserByID), ctx, ID)
}

// GetAllUsers mocks base method.
func (m *MockUserRepo) GetAllUsers(ctx context.Context) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", ctx)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserRepoMockRecorder) GetAllUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserRepo)(nil).GetAllUsers), ctx)
}

// GetUserByID mocks base method.
func (m *MockUserRepo) GetUserByID(ctx context.Context, ID string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, ID)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepoMockRecorder) GetUserByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepo)(nil).GetUserByID), ctx, ID)
}

// GetUserByUsername mocks base method.
func (m *MockUserRepo) GetUserByUsername(ctx context.Context, username string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserRepoMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserRepo)(nil).GetUserByUsername), ctx, username)
}

// UpdateUserByID mocks base method.
func (m *MockUserRepo) UpdateUserByID(ctx context.Context, ID string, newUserInfo models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByID", ctx, ID, newUserInfo)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserByID indicates an expected call of UpdateUserByID.
func (mr *MockUserRepoMockRecorder) UpdateUserByID(ctx, ID, newUserInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByID", reflect.TypeOf((*MockUserRepo)(nil).UpdateUserByID), ctx, ID, newUserInfo)
}

// MockDefferedTaksRepo is a mock of DefferedTaksRepo interface.
type MockDefferedTaksRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDefferedTaksRepoMockRecorder
}

// MockDefferedTaksRepoMockRecorder is the mock recorder for MockDefferedTaksRepo.
type MockDefferedTaksRepoMockRecorder struct {
	mock *MockDefferedTaksRepo
}

// NewMockDefferedTaksRepo creates a new mock instance.
func NewMockDefferedTaksRepo(ctrl *gomock.Controller) *MockDefferedTaksRepo {
	mock := &MockDefferedTaksRepo{ctrl: ctrl}
	mock.recorder = &MockDefferedTaksRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefferedTaksRepo) EXPECT() *MockDefferedTaksRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDefferedTaksRepo) Create(ctx context.Context, task models.DefferedTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDefferedTaksRepoMockRecorder) Create(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDefferedTaksRepo)(nil).Create), ctx, task)
}

// MockRefreshInvalidator is a mock of RefreshInvalidator interface.
type MockRefreshInvalidator struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshInvalidatorMockRecorder
}

// MockRefreshInvalidatorMockRecorder is the mock recorder for MockRefreshInvalidator.
type MockRefreshInvalidatorMockRecorder struct {
	mock *MockRefreshInvalidator
}

// NewMockRefreshInvalidator creates a new mock instance.
func NewMockRefreshInvalidator(ctrl *gomock.Controller) *MockRefreshInvalidator {
	mock := &MockRefreshInvalidator{ctrl: ctrl}
	mock.recorder = &MockRefreshInvalidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshInvalidator) EXPECT() *MockRefreshInvalidatorMockRecorder {
	return m.recorder
}

// CheckTokenInBlackList mocks base method.
func (m *MockRefreshInvalidator) CheckTokenInBlackList(ctx context.Context, tokenID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTokenInBlackList", ctx, tokenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckTokenInBlackList indicates an expected call of CheckTokenInBlackList.
func (mr *MockRefreshInvalidatorMockRecorder) CheckTokenInBlackList(ctx, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTokenInBlackList", reflect.TypeOf((*MockRefreshInvalidator)(nil).CheckTokenInBlackList), ctx, tokenID)
}

// InvalidRefresh mocks base method.
func (m *MockRefreshInvalidator) InvalidRefresh(ctx context.Context, tokenID string, expired time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidRefresh", ctx, tokenID, expired)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidRefresh indicates an expected call of InvalidRefresh.
func (mr *MockRefreshInvalidatorMockRecorder) InvalidRefresh(ctx, tokenID, expired interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidRefresh", reflect.TypeOf((*MockRefreshInvalidator)(nil).InvalidRefresh), ctx, tokenID, expired)
}

// MockUserCache is a mock of UserCache interface.
type MockUserCache struct {
	ctrl     *gomock.Controller
	recorder *MockUserCacheMockRecorder
}

// MockUserCacheMockRecorder is the mock recorder for MockUserCache.
type MockUserCacheMockRecorder struct {
	mock *MockUserCache
}

// NewMockUserCache creates a new mock instance.
func NewMockUserCache(ctrl *gomock.Controller) *MockUserCache {
	mock := &MockUserCache{ctrl: ctrl}
	mock.recorder = &MockUserCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCache) EXPECT() *MockUserCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUserCache) Delete(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserCacheMockRecorder) Delete(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserCache)(nil).Delete), ctx, userID)
}

// Get mocks base method.
func (m *MockUserCache) Get(ctx context.Context, userID string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserCacheMockRecorder) Get(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserCache)(nil).Get), ctx, userID)
}

// Set mocks base method.
func (m *MockUserCache) Set(ctx context.Context, usersID string, user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, usersID, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockUserCacheMockRecorder) Set(ctx, usersID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockUserCache)(nil).Set), ctx, usersID, user)
}
